[Error]
enum ZcashError {
    "RPC",
    "InvalidVaultPubkey",
    "InvalidAddress",
    "NoOrchardReceiver",
    "NotEnoughFunds",
    "TxRejected",
    "Reorg",
    "AssertError",
};

dictionary Height {
    u32 number;
    bytes hash;
};

dictionary TransparentKey {
    bytes sk;
    bytes pk;
    string addr;
};

dictionary UTXO {
    string txid;
    u32 height;
    u32 vout;
    string script;
    u64 value;
};

enum Direction {
    "Incoming",
    "Outgoing",
};

dictionary VaultTx {
    string txid;
    u32 height;
    Output counterparty;
    Direction direction;
};

dictionary BlockTxs {
    string start_hash;
    string end_hash;
    u32 start_height;
    u32 end_height;
    sequence<VaultTx> txs;
};

dictionary TxBytes {
    string txid;
    bytes data;
};

dictionary Output {
    string address;
    u64 amount;
    string memo;
};

dictionary PartialTx {
    u32 height;
    sequence<UTXO> inputs;
    sequence<Output> outputs;
    u64 fee;
    Sighashes sighashes;
    bytes tx_seed;
};

dictionary Sighashes {
    sequence<bytes> hashes;
};

namespace maya_zcash {
    void init_logger();

    [Throws=ZcashError]
    Height get_latest_height();

    [Throws=ZcashError]
    string get_vault_address(bytes pubkey);

    [Throws=ZcashError]
    bytes get_ovk(bytes pubkey);

    [Throws=ZcashError]
    boolean validate_address(string address);

    [Throws=ZcashError]
    boolean match_with_blockchain_receiver(string address, string receiver);

    [Throws=ZcashError]
    u64 get_balance(string address);

    [Throws=ZcashError]
    sequence<UTXO> list_utxos(string address);

    [Throws=ZcashError]
    sequence<VaultTx> scan_mempool(bytes pubkey);

    [Throws=ZcashError]
    BlockTxs? scan_blocks(bytes pubkey, sequence<string> prev_hashes);

    [Throws=ZcashError]
    TxBytes send_to_vault(
        u32 expiry_height,
        bytes sk,
        string from,
        bytes vault,
        u64 amount,
        string memo
    );

    [Throws=ZcashError]
    string broadcast_raw_tx(bytes tx);

    [Throws=ZcashError]
    TransparentKey sk_to_pub(string wif);

    [Throws=ZcashError]
    PartialTx pay_from_vault(
        u32 height,
        bytes vault,
        string to,
        u64 amount,
        string memo);

    [Throws=ZcashError]
    PartialTx combine_vault(
        u32 height, 
        bytes vault);

    [Throws=ZcashError]
    PartialTx combine_vault_utxos(
        u32 height, 
        bytes vault,
        sequence<UTXO> utxos);

    [Throws=ZcashError]
    bytes sign_sighash(
        bytes sk,
        bytes sighash);

    [Throws=ZcashError]
    bytes apply_signatures(
        bytes vault,
        PartialTx ptx,
        sequence<bytes> signatures);
};
