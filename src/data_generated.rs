// automatically generated by the FlatBuffers compiler, do not modify


// @generated

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod fb {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum HeightOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Height<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Height<'a> {
  type Inner = Height<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Height<'a> {
  pub const VT_NUMBER: flatbuffers::VOffsetT = 4;
  pub const VT_HASH: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Height { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HeightArgs<'args>
  ) -> flatbuffers::WIPOffset<Height<'bldr>> {
    let mut builder = HeightBuilder::new(_fbb);
    if let Some(x) = args.hash { builder.add_hash(x); }
    builder.add_number(args.number);
    builder.finish()
  }

  pub fn unpack(&self) -> HeightT {
    let number = self.number();
    let hash = self.hash().map(|x| {
      x.into_iter().collect()
    });
    HeightT {
      number,
      hash,
    }
  }

  #[inline]
  pub fn number(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Height::VT_NUMBER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hash(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Height::VT_HASH, None)}
  }
}

impl flatbuffers::Verifiable for Height<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("number", Self::VT_NUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("hash", Self::VT_HASH, false)?
     .finish();
    Ok(())
  }
}
pub struct HeightArgs<'a> {
    pub number: u32,
    pub hash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for HeightArgs<'a> {
  #[inline]
  fn default() -> Self {
    HeightArgs {
      number: 0,
      hash: None,
    }
  }
}

pub struct HeightBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HeightBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_number(&mut self, number: u32) {
    self.fbb_.push_slot::<u32>(Height::VT_NUMBER, number, 0);
  }
  #[inline]
  pub fn add_hash(&mut self, hash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Height::VT_HASH, hash);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HeightBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HeightBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Height<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Height<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Height");
      ds.field("number", &self.number());
      ds.field("hash", &self.hash());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct HeightT {
  pub number: u32,
  pub hash: Option<Vec<u8>>,
}
impl Default for HeightT {
  fn default() -> Self {
    Self {
      number: 0,
      hash: None,
    }
  }
}
impl HeightT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Height<'b>> {
    let number = self.number;
    let hash = self.hash.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    Height::create(_fbb, &HeightArgs{
      number,
      hash,
    })
  }
}
}  // pub mod fb

